<form class="{{cssClass}} {{actor.type}} flexcol" autocomplete="off">
{{#if (eq system.attributes.nature "air")}}<div class="actor-air">
  {{else}}
	{{#if (eq system.attributes.nature "darkness")}}<div class="actor-darkness">
		{{else}}
			{{#if (eq system.attributes.nature "earth")}}<div class="actor-earth">
				{{else}}
					{{#if (eq system.attributes.nature "fire")}}<div class="actor-fire">
						{{else}}
							{{#if (eq system.attributes.nature "ice")}}<div class="actor-ice">
								{{else}}
									{{#if (eq system.attributes.nature "light")}}<div class="actor-light">
										{{else}}
											{{#if (eq system.attributes.nature "volt")}}<div class="actor-volt">
												{{else}}
													{{#if (eq system.attributes.nature "water")}}<div class="actor-water">
														{{else}}<div>
														{{/if}}
													{{/if}}
											{{/if}}
									{{/if}}
							{{/if}}
					{{/if}}
			{{/if}}
	{{/if}}
  {{!-- Sheet Header --}}
  <header class="sheet-header">
    <img class="profile-img" src="{{actor.img}}" data-edit="img" title="{{actor.name}}" height="100" width="100"/>
    <div class="header-fields">
      <h1 class="charname"><input name="name" type="text" value="{{actor.name}}" placeholder="Name"/></h1>
      {{!-- The grid classes are defined in scss/global/_grid.scss. To use,
      use both the "grid" and "grid-Ncol" class where "N" can be any number
      from 1 to 12 and will create that number of columns.  --}}
      <div class="resources grid grid-2col">

        {{!-- "flex-group-center" is also defined in the _grid.scss file
        and it will add a small amount of padding, a border, and will
        center all of its child elements content and text. --}}
        <div class="resource flex-group-center">
          <label for="system.health.value" class="resource-label">{{localize "ZORA.Attribute.Health"}}</label>
          <div class="resource-content flexrow flex-center flex-between" id="actorHealth" style="padding: 0px 15%;">
          <input type="text" name="system.health.value" value="{{system.health.value}}" data-dtype="Number"/>
          <span>/</span>
		  <span>{{system.health.max}}</span>
          <!--<input type="text" name="system.health.max" value="{{system.health.max}}" data-dtype="Number" readonly/>-->
          </div>
        </div>

        <div class="resource flex-group-center">
          <label for="system.attributes.level.value" class="resource-label">{{localize "ZORA.Attribute.Level"}}: {{system.attributes.level.value}}</label>
          <div class="resource-content flexrow flex-center flex-between" style="padding: 0px 15%;">
          <input type="range" name="system.attributes.level.value" value="{{system.attributes.level.value}}" data-dtype="Number" min="1" max="10"/>
          </div>
        </div>
    </div>
	</div>
  </header>

  {{!-- Sheet Tab Navigation --}}
  <nav class="sheet-tabs tabs" data-group="primary">
    {{!-- Default tab is specified in actor-sheet.mjs --}}
    <a class="item" data-tab="summary">Summary</a>
    <a class="item" data-tab="dossier">Dossier</a>
    <a class="item" data-tab="equip">Equipment</a>
    <a class="item" data-tab="spells">Spells</a>
    <a class="item" data-tab="effects">Effects</a>
  </nav>

  {{!-- Sheet Body --}}
  <section class="sheet-body">

    {{!-- Owned Features Tab --}}
    <div class="tab features" data-group="primary" data-tab="summary">
      <section>
			{{!-- The grid classes are defined in scss/global/_grid.scss. To use,
			  use both the "grid" and "grid-Ncol" class where "N" can be any number
			  from 1 to 12 and will create that number of columns.  --}}			 
			 <div class="abilities grid grid-4col">
				{{#each system.abilities as |ability key|}}
				<div class="ability flexrow flex-group-center">
				  <label for="system.abilities.{{key}}.value" class="resource-label rollable flexlarge" data-roll="d8+@abilities.{{key}}.value" data-label="{{ability.label}}">{{localize ability.label}}</label>
				  <input type="text" name="system.abilities.{{key}}.value" value="{{ability.value}}" data-dtype="Number"/>
				  <!--<span class="ability-mod rollable" data-roll="d8+@abilities.{{key}}.value" data-label="{{ability.label}}">{{numberFormat ability.value decimals=0 sign=true}}</span>-->
				</div>
				{{/each}}
			{{#unless (eq system.attributes.skillpoints.value 0)}}
				<div class="ability flexrow flex-group-center grid-start-2 grid-span-2" id="skillPoints">
				<div class="resource">
					<label for="system.attributes.skillpoints.value" class="resource-label">{{localize "ZORA.Attribute.SkillPoints"}}</label>
					<span>{{system.attributes.skillpoints.value}}</span>
				</div>
			  </div>
			{{/unless}}
			</div>	
		{{!-- For the main features list, span the right two columns --}}
        <section class="main grid-span-2">
          {{!-- This is a Handlebars partial. They're stored in the `/parts` folder next to this sheet, and defined in module/helpers/templates.mjs --}}
          {{> "systems/zora_1_1/templates/actor/parts/actor-fons.hbs"}}
        </section>
      </section>
    </div>

    {{!-- Biography Tab --}}
	<div class="tab biography" data-group="primary" data-tab="dossier">
		<div class="grid grid-5col">
			<div class="grid-span-2">
				<label for="system.attributes.race" class="resource-label">{{localize "ZORA.Attribute.Race"}}</label>
				<input type="text" name="system.attributes.race" value="{{system.attributes.race}}"/>
			</div>
			<div class=" grid-start-4 grid-span-2">
				<label for="system.attributes.faction" class="resource-label">{{localize "ZORA.Attribute.Faction"}}</label>
				<input type="text" name="system.attributes.faction" value="{{system.attributes.faction}}"/>
			</div>
		</div>
		<div>
			<h2><label for="system.biography" class="resource-label">{{localize "ZORA.Attribute.Biography"}}</label></h2>
			  {{!-- If you want TinyMCE editors to output inline rolls when rendered, you need to pass the actor's roll data to the rollData property. --}}
			  {{editor system.biography target="system.biography" rollData=rollData button=true owner=owner editable=editable}}
		</div>
		<div>
			<h2><label for="system.notes" class="resource-label">{{localize "ZORA.Attribute.Notes"}}</label></h2>
			  {{!-- If you want TinyMCE editors to output inline rolls when rendered, you need to pass the actor's roll data to the rollData property. --}}
			  {{editor system.notes target="system.notes" rollData=rollData button=true owner=owner editable=editable}}
		</div>
    </div>

    {{!-- Owned Items Tab --}}
    <div class="tab items" data-group="primary" data-tab="equip">
       {{> "systems/zora_1_1/templates/actor/parts/actor-equipment.hbs"}}
    </div>

    {{!-- Owned Spells Tab --}}
    <div class="tab spells" data-group="primary" data-tab="spells">
      {{> "systems/zora_1_1/templates/actor/parts/actor-abilities.hbs"}}
    </div>

    {{!-- Active Effects Tab --}}
    <div class="tab effects flexcol" data-group="primary" data-tab="effects">
      {{> "systems/zora_1_1/templates/actor/parts/actor-effects.hbs"}}
    </div>

	</script>
  </section>
  </div>
</form>

